#include <stdio.h>
#include <stdlib.h>
struct node
{
    int info;
    struct node *link;
};
struct node *create_list(struct node *start);
void disp(struct node *start);
void count(struct node *start);
void search(struct node *start,int data);
struct node *addatbeg(struct node *start,int data);
struct node *addatend(struct node *start,int data);
struct node *addbefore(struct node *start, int data, int item);
struct node *addafter(struct node *start, int data, int item);
struct node *addatpos(struct node *start, int data, int pos);
struct node *del(struct node *start, int data);
struct node *reverse(struct node *start);
int main()
{
   struct node *start=NULL;
   int choice,data,item,pos;
   while(1)
   {
       printf("1 for Create List\n");
       printf("2 for Display\n");
       printf("3 for Count\n");
       printf("4 for Search\n");
       printf("5 for Add Empty List\Add at Beginning\n");
       printf("6 for Add at End\n");
       printf("7 for Add before Node\n");
       printf("8 for Add after Node\n");
       printf("9 for Add at Position\n");
       printf("10 for Delete\n");
       printf("11 for Reverse\n");
       printf("12 for Quit\n");
       printf("Enter Your choice...........");
       scanf("%d",&choice);
       switch(choice)
       {
        case 1:
        start=create_list(start);
        break;
        case 2:
        disp(start);
        break;
        case 3:
        count(start);
        break;
        case 4:
        printf("Enter the Element to be search....");
        scanf("%d",&data);
        search(start,data);
        break;
        case 5:
        printf("Enter the element to Insert\n");
        scanf("%d",&data);
        start=addatbeg(start,data);
        break;
        case 6:
        printf("Enter the element to Insert\n");
        scanf("%d",&data);
        start=addatend(start,data);
        break;
        case 7:
        printf("Enter the element to Insert\n");
        scanf("%d",&data);
        printf("Enter the Element before insert\n");
        scanf("%d",&item);
        start=addbefore(start,data,item);
        break;
        case 8:
        printf("Enter the element to Insert\n");
        scanf("%d",&data);
        printf("Enter the Element after Insert\n");
        scanf("%d",&item);
        start=addafter(start,data,item);
        break;
        case 9:
        printf("Enter the element to Insert\n");
        scanf("%d",&data);
        printf("Enter Position want to insert\n");
        scanf("%d",&pos);
        start=addatpos(start,data,pos);
        break;
        case 10:
        printf("Enter the element to be Delete\n");
        scanf("%d",&data);
        start=del(start,data);
        break;
        case 11:
        start=reverse(start);
        break;
        case 12:
        exit(1);
        break;
        default:
        printf("Invalid");
       }
   }
    return 0;
}
struct node *create_list(struct node *start)
{
    int i,n,data;
    printf("Enter the No of Nodes\n");
    scanf("%d",&n);
    start=NULL;
    if(n==0)
    return start;
    printf("Enter the element to Insert\n");
    scanf("%d",&data);
    start=addatbeg(start,data);
    for(i=2;i<=n;i++)
    {
        printf("Enter the element to Insert\n");
        scanf("%d",&data);
        start=addatend(start,data);
    }
    return start;
}
struct node *addatbeg(struct node *start, int data)
{
    struct node *tmp;
    tmp=(struct node *)malloc(sizeof(struct node));
    tmp->info=data;
    tmp->link=start;
    start=tmp;
    return start;
}
struct node *addatend(struct node *start,int data)
{
    struct node *tmp,*p;
    tmp=(struct node *)malloc(sizeof(struct node));
    tmp->info=data;
    p=start;
    while(p->link!=NULL)
    {
        p=p->link;
    }
    p->link=tmp;
    tmp->link=NULL;
    return start;
}
void disp(struct node *start)
{
    struct node *p;
    if(start==NULL)
    {
        printf("List is Empty\n");
        return;
    }
    p=start;
    printf("List is\n");
    while(p!=NULL)
    {
        printf("%d ",p->info);
        p=p->link;
    }
    printf("\n");
}
void count(struct node *start)
{
    struct node *p;
    int cnt=0;
    p=start;
    while(p!=NULL)
    {
        p=p->link;
        cnt++;
    }
    printf("Number of Element are  :%d\n",cnt);
}
void search(struct node *start,int item)
{

    struct node *p=start;
    int pos=1;
    while(p!=NULL)
    {
        if(p->info==item)
        {
printf("Item %d found at position %d\n",item,pos);
            return;
        }
        p=p->link;
        pos++;
    }
    printf("Item %d not found in list\n",item);
}
struct node *addbefore(struct node *start,int data, int item)
{
    struct node *tmp,*p;
    if(start==NULL)
    {
        printf("List is empty\n");
        return start;

    }
    if(item==start->info) // insert bef 1st node
    {
        tmp=(struct node *)malloc(sizeof(struct node));
        tmp->info=data;
        tmp->link=start;
        start=tmp;
        return start;
    }
    p=start;
    while(p->link!=NULL)
    {
        if(p->link->info==item)
        {
            tmp=(struct node *)malloc(sizeof(struct node));
            tmp->info=data;
            tmp->link=p->link;
            p->link=tmp;
            return start;
        }
        p=p->link;
    }
    printf("%d not present in the list \n",item);
    return start;
}
struct node *addafter(struct node *start,int data, int item)
{
    struct node *tmp,*p;
    p=start;
    while(p!=NULL)
    {
        if(p->info==item)
        {
            tmp=(struct node *)malloc(sizeof(struct node));
            tmp->info=data;
            tmp->link=p->link;
            p->link=tmp;
            return start;
        }
        p=p->link;
    }
    printf("%d not present in the list \n",item);
    return start;
}
struct node *addatpos(struct node *start, int data, int pos)
{
    struct node *tmp,*p;
    int i;
    tmp=(struct node *)malloc(sizeof(struct node));
    tmp->info=data;
    if(pos==1)
    {
        tmp->link=start;
        start=tmp;
        return start;
    }
    p=start;
    for(i=1;i<pos-1 && p!=NULL;i++)
    {

        p=p->link;
    }
    if(p==NULL)
    printf("These are less than %d element\n",pos);
    else
    {
        tmp->link=p->link;
        p->link=tmp;
    }
    return start;
}
struct node *del(struct node *start,int data)
{
    struct node *tmp,*p;
    if(start==NULL)
    {
        printf("List is Empty\n");
        return start;
    }
    if(start->info==data)// del 1st node
    {
        tmp=start;
        start=start->link;
        free(tmp);
        return start;
    }
    p=start;// del in between
    while(p->link!=NULL)
    {
        if(p->link->info==data)
        {
            tmp=p->link;
            p->link=tmp->link;
            free(tmp);
            return start;
        }
        p=p->link;
    }
    printf("Element %d not found \n",data);
    return start;
}
struct node *reverse(struct node *start)
{
    struct node *prev,*ptr,*next;
    prev=NULL;
    ptr=start;
    while(ptr!=NULL)
    {
        next=ptr->link;
        ptr->link=prev;
        prev=ptr;
        ptr=next;
    }
    start=prev;
    return start;
}
